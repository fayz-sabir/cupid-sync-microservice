---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: kubernetes-dashboard
data:
  promtail-config.yaml: |
    server:
      http_listen_port: 3101
      grpc_listen_port: 0

    positions:
      filename: /run/promtail/positions.yaml

    clients:
      - url: http://loki.kubernetes-dashboard:3100/loki/api/v1/push

    scrape_configs:
      # 1) HOTFIX: direct tail (filename labels + pretty pipeline)
      - job_name: hotfix-static-cupid
        static_configs:
          - targets: [localhost]
            labels:
              job: hotfix-cupid
              app: cupid-sync-app
              __path__: /var/log/containers/cupid-sync-app-*_kubernetes-dashboard_cupid-sync-app-*.log
        # Flatten to plain message, then parse Spring, add labels
        pipeline_stages:
          - docker: {}     # parse Docker JSON {"log","stream","time"} if present
          - cri: {}        # parse CRI format if present
          - output:        # ALWAYS switch entry to the clean text payload
              source: log
          - regex:         # parse Spring Boot default line to get level + msg
              expression: '^(?P<ts>\d{4}-\d{2}-\d{2}T[0-9:\.\+Z-]+)\s+(?P<level>TRACE|DEBUG|INFO|WARN|ERROR)\s+\d+\s+---\s+\[[^\]]+\]\s+\S+\s*:\s+(?P<msg>.*)$'
          - labels:
              level:
          - regex:         # optional correlation id in message
              source: msg
              expression: '(?i).*(?:correlationId|corr)[=:]\s*(?P<corr>[0-9a-f-]{8,}).*'
          - labels:
              corr:
          - timestamp:     # prefer app timestamp when present
              source: ts
              format: RFC3339Nano
          - drop:          # trim routine noise
              source: msg
              expression: 'GET /actuator/(health|prometheus)'
          - output:        # final line = clean message
              source: msg
        relabel_configs:
          # /var/log/containers/<pod>_<namespace>_<container>-HASH.log
          - source_labels: [__path__]
            regex: ^/var/log/containers/([^_]+)_([^_]+)_([^-]+)-.*\.log$
            target_label: pod
            replacement: $1
          - source_labels: [__path__]
            regex: ^/var/log/containers/([^_]+)_([^_]+)_([^-]+)-.*\.log$
            target_label: namespace
            replacement: $2
          - source_labels: [__path__]
            regex: ^/var/log/containers/([^_]+)_([^_]+)_([^-]+)-.*\.log$
            target_label: container
            replacement: $3

      # 2) Discovery via kubelet /var/log/pods
      - job_name: kubernetes-pods-podsdir
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - docker: {}
          - cri: {}
          - output:
              source: log
          - regex:
              expression: '^(?P<ts>\d{4}-\d{2}-\d{2}T[0-9:\.\+Z-]+)\s+(?P<level>TRACE|DEBUG|INFO|WARN|ERROR)\s+\d+\s+---\s+\[[^\]]+\]\s+\S+\s*:\s+(?P<msg>.*)$'
          - labels:
              level:
          - regex:
              source: msg
              expression: '(?i).*(?:correlationId|corr)[=:]\s*(?P<corr>[0-9a-f-]{8,}).*'
          - labels:
              corr:
          - timestamp:
              source: ts
              format: RFC3339Nano
          - drop:
              source: msg
              expression: 'GET /actuator/(health|prometheus)'
          - output:
              source: msg
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
          - source_labels: [__meta_kubernetes_pod_label_app]
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            target_label: app
          - action: replace
            source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
            replacement: /var/log/pods/*$1*/$2/*.log

      # 3) Discovery via /var/log/containers symlinks
      - job_name: kubernetes-pods-containersdir
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - docker: {}
          - cri: {}
          - output:
              source: log
          - regex:
              expression: '^(?P<ts>\d{4}-\d{2}-\d{2}T[0-9:\.\+Z-]+)\s+(?P<level>TRACE|DEBUG|INFO|WARN|ERROR)\s+\d+\s+---\s+\[[^\]]+\]\s+\S+\s*:\s+(?P<msg>.*)$'
          - labels:
              level:
          - regex:
              source: msg
              expression: '(?i).*(?:correlationId|corr)[=:]\s*(?P<corr>[0-9a-f-]{8,}).*'
          - labels:
              corr:
          - timestamp:
              source: ts
              format: RFC3339Nano
          - drop:
              source: msg
              expression: 'GET /actuator/(health|prometheus)'
          - output:
              source: msg
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
          - source_labels: [__meta_kubernetes_pod_label_app]
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            target_label: app
          - action: replace
            source_labels: [__meta_kubernetes_pod_name, __meta_kubernetes_namespace, __meta_kubernetes_pod_container_name]
            target_label: __path__
            replacement: /var/log/containers/${1}_${2}_${3}-*.log
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "namespaces"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: kubernetes-dashboard
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: kubernetes-dashboard
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      securityContext:
        runAsUser: 0
      containers:
        - name: promtail
          image: grafana/promtail:2.9.8
          args:
            - -config.file=/etc/promtail/promtail-config.yaml
            - -log.level=info
          resources:
            requests: { cpu: "50m", memory: "128Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
          volumeMounts:
            - name: config
              mountPath: /etc/promtail/promtail-config.yaml
              subPath: promtail-config.yaml
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdocker
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlibcontainerd
              mountPath: /var/lib/containerd
              readOnly: true
            - name: run
              mountPath: /run/promtail
      volumes:
        - name: config
          configMap:
            name: promtail-config
            items:
              - key: promtail-config.yaml
                path: promtail-config.yaml
        - name: varlog
          hostPath: { path: /var/log }
        - name: varlibdocker
          hostPath: { path: /var/lib/docker/containers }
        - name: varlibcontainerd
          hostPath: { path: /var/lib/containerd }
        - name: run
          emptyDir: {}
